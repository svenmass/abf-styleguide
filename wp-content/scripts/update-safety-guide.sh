#!/bin/bash

# ABF Styleguide Theme - Update Safety & Maintenance System
# Protects existing block functionality during theme updates

set -e

SOURCE_THEME="themes/abf-styleguide"
BACKUP_DIR="theme-backups"
SAFETY_DIR="update-safety"

echo "üõ°Ô∏è ABF Styleguide Theme - Update Safety System"
echo ""

# Create safety directories
mkdir -p "$BACKUP_DIR"
mkdir -p "$SAFETY_DIR"

# Main menu
while true; do
    echo "=== UPDATE SAFETY MENU ==="
    echo "1) üîí Create Safety Backup"
    echo "2) üìã Generate Block Compatibility Report"
    echo "3) üß™ Test Block Functionality"
    echo "4) üîç Compare with Previous Version"  
    echo "5) üìñ View Update Guidelines"
    echo "6) üö® Fix ACF Block Issues"
    echo "7) ‚ùå Exit"
    echo ""
    
    read -p "Choose option (1-7): " choice
    
    case $choice in
        1)
            echo ""
            echo "üîí Creating Safety Backup..."
            
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_NAME="abf-styleguide-backup-$TIMESTAMP"
            
            if [ -d "$SOURCE_THEME" ]; then
                cp -r "$SOURCE_THEME" "$BACKUP_DIR/$BACKUP_NAME"
                
                # Create backup info
                cat > "$BACKUP_DIR/$BACKUP_NAME/BACKUP_INFO.txt" << EOF
=== ABF STYLEGUIDE BACKUP ===
Created: $(date)
Theme Version: $(grep -o 'Version: [0-9.]*' "$SOURCE_THEME/style.css" 2>/dev/null || echo "Unknown")
Purpose: Pre-update safety backup

Block Count: $(find "$SOURCE_THEME/blocks" -maxdepth 1 -type d 2>/dev/null | wc -l | xargs)

This backup contains the complete theme structure
before any modifications or updates.

To restore:
1. Stop WordPress
2. Replace current theme with this backup
3. Restart WordPress
4. Test all blocks
EOF
                
                echo "‚úÖ Backup created: $BACKUP_DIR/$BACKUP_NAME"
                echo "üìÅ Backup contains complete theme with all blocks"
                
                # Create restore script
                cat > "$BACKUP_DIR/restore-$BACKUP_NAME.sh" << EOF
#!/bin/bash
echo "üîÑ Restoring ABF Styleguide from backup..."
echo "Timestamp: $TIMESTAMP"

if [ -d "$SOURCE_THEME" ]; then
    echo "Creating current backup before restore..."
    mv "$SOURCE_THEME" "${SOURCE_THEME}-replaced-$(date +%Y%m%d_%H%M%S)"
fi

cp -r "$BACKUP_DIR/$BACKUP_NAME" "$SOURCE_THEME"
echo "‚úÖ Theme restored from backup!"
echo "üîß Please check all blocks in WordPress admin"
EOF
                
                chmod +x "$BACKUP_DIR/restore-$BACKUP_NAME.sh"
                echo "üìú Restore script: $BACKUP_DIR/restore-$BACKUP_NAME.sh"
                
            else
                echo "‚ùå Source theme not found at $SOURCE_THEME"
            fi
            ;;
            
        2)
            echo ""
            echo "üìã Generating Block Compatibility Report..."
            
            REPORT_FILE="$SAFETY_DIR/block-compatibility-$(date +%Y%m%d).txt"
            
            cat > "$REPORT_FILE" << EOF
=== ABF STYLEGUIDE BLOCK COMPATIBILITY REPORT ===
Generated: $(date)
Theme Location: $SOURCE_THEME

EOF

            if [ -d "$SOURCE_THEME/blocks" ]; then
                echo "BLOCK ANALYSIS:" >> "$REPORT_FILE"
                echo "" >> "$REPORT_FILE"
                
                for block_dir in "$SOURCE_THEME/blocks"/*; do
                    if [ -d "$block_dir" ]; then
                        block_name=$(basename "$block_dir")
                        echo "Block: $block_name" >> "$REPORT_FILE"
                        
                        # Check required files
                        files_status=""
                        [ -f "$block_dir/block.json" ] && files_status+="‚úÖ block.json " || files_status+="‚ùå block.json "
                        [ -f "$block_dir/template.php" ] && files_status+="‚úÖ template.php " || files_status+="‚ùå template.php "
                        [ -f "$block_dir/fields.php" ] && files_status+="‚úÖ fields.php " || files_status+="‚ùå fields.php "
                        [ -f "$block_dir/style.scss" ] && files_status+="‚úÖ style.scss" || files_status+="‚ùå style.scss"
                        
                        echo "  Files: $files_status" >> "$REPORT_FILE"
                        
                        # Check for potential issues
                        if [ -f "$block_dir/template.php" ]; then
                            if grep -q "get_field" "$block_dir/template.php"; then
                                echo "  ‚úÖ Uses ACF get_field() function" >> "$REPORT_FILE"
                            else
                                echo "  ‚ö†Ô∏è  No ACF fields detected" >> "$REPORT_FILE"
                            fi
                            
                            if grep -q "<?php" "$block_dir/template.php"; then
                                echo "  ‚úÖ Valid PHP template" >> "$REPORT_FILE"
                            else
                                echo "  ‚ùå Missing PHP opening tag" >> "$REPORT_FILE"
                            fi
                        fi
                        
                        echo "" >> "$REPORT_FILE"
                    fi
                done
                
                # Summary
                TOTAL_BLOCKS=$(find "$SOURCE_THEME/blocks" -maxdepth 1 -type d | wc -l | xargs)
                TOTAL_BLOCKS=$((TOTAL_BLOCKS - 1))
                echo "SUMMARY:" >> "$REPORT_FILE"
                echo "Total Blocks: $TOTAL_BLOCKS" >> "$REPORT_FILE"
                echo "Report saved to: $REPORT_FILE" >> "$REPORT_FILE"
                
                echo "‚úÖ Report generated: $REPORT_FILE"
                echo "üìä Found $TOTAL_BLOCKS blocks"
                
            else
                echo "‚ùå No blocks directory found"
            fi
            ;;
            
        3)
            echo ""
            echo "üß™ Block Functionality Test..."
            
            if [ -d "$SOURCE_THEME/blocks" ]; then
                echo "Testing block templates for common issues..."
                
                issues_found=0
                
                for block_dir in "$SOURCE_THEME/blocks"/*; do
                    if [ -d "$block_dir" ]; then
                        block_name=$(basename "$block_dir")
                        echo "Testing: $block_name"
                        
                        # Test 1: PHP Syntax
                        if [ -f "$block_dir/template.php" ]; then
                            if php -l "$block_dir/template.php" > /dev/null 2>&1; then
                                echo "  ‚úÖ PHP syntax valid"
                            else
                                echo "  ‚ùå PHP syntax error detected"
                                ((issues_found++))
                            fi
                        fi
                        
                        # Test 2: Block.json validation
                        if [ -f "$block_dir/block.json" ]; then
                            if python3 -m json.tool "$block_dir/block.json" > /dev/null 2>&1; then
                                echo "  ‚úÖ JSON valid"
                            else
                                echo "  ‚ùå JSON syntax error"
                                ((issues_found++))
                            fi
                        fi
                        
                        # Test 3: Empty template check (fixes ACF error)
                        if [ -f "$block_dir/template.php" ]; then
                            if grep -q "<div\|<section\|<article\|<span\|<p\|<h[1-6]" "$block_dir/template.php"; then
                                echo "  ‚úÖ Contains HTML elements"
                            else
                                echo "  ‚ö†Ô∏è  No HTML elements found - may cause ACF errors"
                                ((issues_found++))
                            fi
                        fi
                        
                        echo ""
                    fi
                done
                
                if [ $issues_found -eq 0 ]; then
                    echo "üéâ All tests passed! No issues found."
                else
                    echo "‚ö†Ô∏è  Found $issues_found potential issues"
                    echo "üí° Run option 6 to fix ACF block issues"
                fi
                
            else
                echo "‚ùå No blocks directory found"
            fi
            ;;
            
        4)
            echo ""
            echo "üîç Version Comparison..."
            
            if [ -d "$BACKUP_DIR" ]; then
                echo "Available backups:"
                ls -la "$BACKUP_DIR" | grep abf-styleguide-backup
                echo ""
                
                read -p "Enter backup name to compare with: " backup_name
                
                if [ -d "$BACKUP_DIR/$backup_name" ]; then
                    echo "Comparing current version with backup..."
                    
                    # Compare block structure
                    echo "Block differences:"
                    diff -r "$SOURCE_THEME/blocks" "$BACKUP_DIR/$backup_name/blocks" || echo "Differences found above"
                    
                else
                    echo "‚ùå Backup not found"
                fi
            else
                echo "‚ùå No backups available. Create one first (option 1)"
            fi
            ;;
            
        5)
            echo ""
            echo "üìñ UPDATE SAFETY GUIDELINES"
            echo "=========================="
            echo ""
            echo "üîí BEFORE ANY UPDATE:"
            echo "1. Create safety backup (option 1)"
            echo "2. Test all blocks (option 3)"  
            echo "3. Generate compatibility report (option 2)"
            echo ""
            echo "‚ö†Ô∏è  CRITICAL UPDATE RULES:"
            echo "‚Ä¢ NEVER modify existing block field names"
            echo "‚Ä¢ NEVER change block.json 'name' property"
            echo "‚Ä¢ NEVER remove existing ACF fields"
            echo "‚Ä¢ NEVER change field 'key' values"
            echo ""
            echo "‚úÖ SAFE UPDATE PRACTICES:"
            echo "‚Ä¢ Add new fields with NEW names"
            echo "‚Ä¢ Keep backward compatibility"
            echo "‚Ä¢ Use versioning for field groups"
            echo "‚Ä¢ Test on staging first"
            echo ""
            echo "üîÑ VERSION CONTROL STRATEGY:"
            echo "‚Ä¢ Keep field keys consistent"
            echo "‚Ä¢ Document all changes"  
            echo "‚Ä¢ Use semantic versioning"
            echo "‚Ä¢ Maintain changelog"
            echo ""
            echo "üÜò IF SOMETHING BREAKS:"
            echo "1. Stop WordPress"
            echo "2. Restore from backup"
            echo "3. Check error logs"
            echo "4. Fix issues incrementally"
            echo ""
            ;;
            
        6)
            echo ""
            echo "üö® Fixing ACF Block Issues..."
            
            if [ -d "$SOURCE_THEME/blocks" ]; then
                echo "Scanning for empty block templates..."
                
                fixed_count=0
                
                for block_dir in "$SOURCE_THEME/blocks"/*; do
                    if [ -d "$block_dir" ]; then
                        block_name=$(basename "$block_dir")
                        template_file="$block_dir/template.php"
                        
                        if [ -f "$template_file" ]; then
                            # Check if template has minimal HTML
                            if ! grep -q "<div\|<section\|<article\|<span\|<p\|<h[1-6]" "$template_file"; then
                                echo "Fixing: $block_name"
                                
                                # Add wrapper div at the beginning of PHP templates
                                if grep -q "<?php" "$template_file"; then
                                    # Create backup
                                    cp "$template_file" "${template_file}.backup"
                                    
                                    # Add wrapper div after PHP opening
                                    sed -i '' '1 a\
<div class="block-'$block_name'">
' "$template_file"
                                    
                                    # Add closing div at the end
                                    echo "</div>" >> "$template_file"
                                    
                                    echo "  ‚úÖ Added wrapper div to prevent React errors"
                                    ((fixed_count++))
                                fi
                            fi
                        fi
                    fi
                done
                
                if [ $fixed_count -gt 0 ]; then
                    echo "üéâ Fixed $fixed_count block templates"
                    echo "üíæ Backups saved as *.backup files"
                    echo "üîÑ Refresh WordPress editor to see changes"
                else
                    echo "‚úÖ No fixes needed - all templates have HTML elements"
                fi
                
            else
                echo "‚ùå No blocks directory found"
            fi
            ;;
            
        7)
            echo "üëã Update Safety System - Goodbye!"
            break
            ;;
            
        *)
            echo "‚ùå Invalid option. Please choose 1-7."
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
    echo ""
done 